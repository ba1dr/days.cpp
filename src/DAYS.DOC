                  Программа для напоминания важных дат Days.


   *  Что это за программа?
   *  Отличия и возможности новой версии.
   *  Описание для использования
     - Структура файла с датами
     - Блок
     - Подставляемая переменная
     - Условия на подставляемые переменные
     - Арифметические действия с подставляемыми переменными
     - Типы событий
       - переменные типа событий
     - События
     - #include - файлы
     - Параметры командной строки
   *  Ближайшие улучшения
   *  Регистрация
   *  Автор

----------------------------------------------

   Иногда мы забываем некоторые даты, например, дни рождения, нужные встречи
  и некоторые праздники. Случается, что мы просыпаемся и вспоминаем : "Сегодня
  же день рождения такого-то !! А подарок не готов !!!".
    Чтобы быть готовым, необходимо записывать все мероприятия и даты и держать
  этот листок всегда на глазах. Однако, можно использовать для этого данную
  программу. Если включить ее в файл начальной загрузки autoexec.bat, то
  при каждом запуске компьютера Вы можете увидеть, какие праздники вас ожи-
  дают в ближайшие дни.

----------------------------------------------

   В пятой версии исправлены многие из тех "глюков", которые появились
 вместе с четвертой, правда вышедшей в ограниченном кругу, версией программы.
   Перечислим основные отличия и особенности новой версии:
    -  более эффективные алгоритмы
    -  полностью изменена структура файла с датами
    -  возможность вложения(включения) файлов друг в друга
    -  появились более гибкие возможности для создания своих типов событий
    -  появились условные структуры
    -  Файл с датами содержит более 300 знаменательных событий!

----------------------------------------------

    Данное описание может показаться сложным для начинающего пользователя.
  Спешим уверить, что ничего НА САМОМ ДЕЛЕ сложного здесь нет, просто
  нужно понять основные принципы построения событий и их типов. Если же на
  это нет времени или желания, то достаточно использовать уже существующие
  типы событий, просто добавляя или заменяя свои события.

    Все данные о событиях должны храниться в текстовом файле, который
  имеет особую структуру. Весь файл представляет собой совокупность блоков,
  вложенных или следующих друг за другом. Блок - это любая последовательность
  символов, заключенная в фигурные скобки "{" - "}". Каждый файл (включая и
  вложенные) должен  иметь  свой  главный блок. Вся информация, размещенная
  вне главного блока считается комментарием и не используется. Комментарии
  внутри  блока  начинаются  со  знака точки с запятой - ";" и продолжаются
  до  конца строки.  Некоторые  блоки  необязательны (например,  блоки без
  заголовка,  вложенные   внутрь  других),  но  способствуют более лучшей
  понятности размещения событий. Фигурные скобки являются операторами и
  должны использоваться в отдельной строке (то есть, в строке c фигурной
  скобкой может быть еще только комментарий).
    Программа различает регистр всех служебных символов. Это значит,
  что имена, например, переменных "var1" и "VAR1" - различны!
    Поддерживаются определения подставляемых переменных. Подставляемые пере-
  менные (в версии 4 - константы) - это определяемые пользователем имена,
  которым можно присваивать какие-либо значения (числовые или строковые) для
  облегчения читаемости "программы". Переменные можно определить или пере-
  определить  с  помощью  служебного слова  "#define ",  за  которым через
  разделитель может следовать значение, присваемое переменной. Значение -
  необязательно, переменная может просто существовать, но имеет по
  умолчанию значение "<empty>".
    Так, можно определить переменную с именем hallo и значением "hallo!"
  следующим образом:
    #define hallo "hallo!"
    Существующие переменные можно использовать в любой дальнейшей части
  этого файла или в последующих включаемых файлах следующим образом. Имя
  переменной заключается в знаки доллара с обеих сторон: "$hallo$". Тогда
  при обработке данной строки вместо этого  будет  подставлено  значение
  переменной. В определении одних переменных могут использоваться значения
  других и в строке могут подставляться сразу несколько переменных.
    При запуске Программы автоматически определяются следующие переменные:
   $hour$ - числовое значение часа на момент запуска программы.
   $min$ - числовое значение минут на момент запуска программы.
   $sec$ - числовое значение секунд на момент запуска программы.
   $day$ - числовое значение текущего дня.
   $month$ - числовое значение текущего месяца.
   $year$ - числовое значение текущего года.
   $daysversion$ - числовое значение версии данной программы (для
      совместного использования одного файла разными версиями программы)
   $eventcount$ - количество подходящих событий до данной позиции файла.
    Эти стандартные переменные также могут быть легко переопределены, но
  вряд ли может возникнуть такая необходимость.
--
   Но полностью использовать переменные можно лишь при использовании условий
  на них. Пока поддерживаются следующие части условия:
    "#ifdef <переменная>"    - если существует <переменная>.
    "#ifndef <переменная>"   - если не существует <переменная>.
    "#if <переменная или значение>[= < <= > >= !]<значение>"  - если
       <переменная или значение> [равно меньше меньше_или_равно больше
       больше_или_равно не_равно] <значению>.
    "#else"  - "иначе"...
    "#endif"  - конец условия.
    В версии, начиная с 5.2 поддерживаются сложные логические условия - с
  логическими операциями "and" и "or". В этом случае все простые и любые
  сложные условия следует заключать в скобки. Операция "and" имеет более
  высокий приоритет при выполнении, чем "or".
    Переменную в условии необязательно заключать в знаки доллара "$", можно
  просто указать ее имя. Пример использования условий:
  #ifdef _aa
    #ifdef abcd
      #if ((abcd=3) or (abcd=8)) and (_aa=17)
         #define efgh 1
      #else
        #define efgh 2
      #endif
    #endif
  #endif

    В стандартном файле с событиями, поставляемом с Программой Вы можете
  видеть пример условия при определении текстового дня недели.
--
    Поддерживаются также простейшие арифметические операции с подставляемыми
  переменными. Так, если использовать, например строку:
  #eval number= 35/ 7-( 2*6)/3* (3+28  /(3+4))+   70
  то в переменную "number" будет подставлено значение 47. В операциях можно
  использовать и переменные, подставляя их в знаках доллара "$":
  #eval abc=$month$ + 1
  Вместо знака присваивания "=" может стоять и любое количество пробелов.
--
    Основу всего составляют типы событий и события.
    О событиях скажем пока лишь то, что они могут быть какого-либо типа.
    Тип события - это блок со следующим заголовком:
       #defeventtype имя_типа                 , например:
       #defeventtype TBIRTHDAY
  где "#defeventtype" - ключевое слово, показывающее, что мы определяем
  тип события, а "имя_типа" - любое имя для него. Далее, через любое коли-
  чество пустых строк (в том числе и строк-комментариев) должна идти откры-
  вающая фигурная скобка "{". Если это будет другой символ, данное событие
  будет считаться сразу же закрытым и значения его переменных не определено.
    Все события одного типа имеют одинаковые параметры вывода - цвет, фон,
  формат вывода, и, если специально не указано, количество дней до вывода.
  Все они определяются внутри типа и являются локальными, то есть не могут
  быть использованы другими типами. Определить переменную можно
  следующим образом:
       &имя_переменной=значение
  Здесь знак амперсанда "&" является указанием, что мы определяем переменную,
  "имя_переменной" может быть одним из стандартных или любым другим. Значение
  зависит от того, что это за переменная (текстовая или цифровая). Переменные
  можно использовать внутри определения типа или события этого типа, заключив
  ее имя в знаки "собачка" - "@". То есть переменная, определенная как
       &days_in_year=365
  может быть использована как @days_in_year@ и вместо нее будет подставлено
  ее значение (365).
  Стандартные же переменные следующие:
      @color@ - указывает цвет текста для вывода [0-15].
      @bkcolor@ - цвет фона [0-7].
      @daysfrw@ - за сколько дней вперед выводить данные события [0-40].
      @daysback@ - за сколько дней выводить прошедшие события [0-40].
      @freq@ - если эта переменная больше нуля, то будет генерироваться
               звуковой сигнал данной частоты...
      @delay@ - и данной длительности.
      @format@ - формат вывода события. О нем подробнее - далее [текстовый].
      @eventdate@ - эту переменную менять нельзя. Она пересчитывается для
         каждого события программой. Содержит текстовое представление даты
         для вывода.
      @eventwhen@ - также переопределяется программой. Содержит текст, в
         котором указано количество дней до события.
      @eventstr@ - текст, содержащий само событие. Переопределяется каждый
         раз.
      @weekdate@ - текст, содержащий день недели для даты (напр. "В ПЯТНИЦУ")
      @was@ - текст, имеет три значения: "БЫЛ", "", "БУДЕТ" - для событий!

    Любые определенные пользователем другие переменные могут быть подставлены
  в переменную @format@.
    Переменная @format@ служит для представления данных для вывода. В ней
  могут содержаться как текст (в кавычках - " ), так и переменные.
  То есть, например для типа со следующей переменной @format@ :

&format=@eventdate@", "@eventwhen@", День рождения "@eventstr@" - поздравить!"

  будут при выводе подставлены значения: даты события(например, "5 ИЮЛЯ"),
  затем - запятая и пробел, время до события (например, "ПОСЛЕЗАВТРА"),
  далее - запятая, пробел, текст "День рождения", пробел, строка события
  (вроде "Иван Иваныча"), далее - текст " - поздравить!". Причем, это будет
  выведено цветом типа и с цветом фона типа:
    5 ИЮЛЯ, ПОСЛЕЗАВТРА, День рождения Иван Иваныча - поздравить!
    Каждая из включенных переменных может отсутствовать или идти в другом
  порядке.
    Если где-нибудь внутри кавычек встречается сочетание "\\", то в этом
  месте строка при выводе переносится на другую строку.
  Тип события закрывается фигурной скобкой блока - "}".

    Событие - это текст, выводящийся определенного числа или за несколько
  дней до него. События определяются в своих блоках. Заголовок блока
  следующий: после ключевого слова "#event" идет имя типа, к которому
  будет принадлежать событие, а далее - имя самого блока(любое):
    #event TBIRTHDAY Birthday
    Далее, как и в описании типа события, открывается блок события. Он
  состоит из строк событий, имеющих определенный формат. Сначала должна
  идти дата события в скобках "(" - ")" (или хотя бы сами скобки). Далее,
  в кавычках  "" - текст события(как раз, переменная @eventstr@). Если
  не указана дата (то есть - пустые скобки), или вместо числа и месяца
  стоят нули, то данное событие будет выводиться каждый раз при запуске.
  Если же "0" - только один из чисел даты (день или месяц), а другой - не
  "0", то событие выводится каждое число месяца (если "0" - число) или
  каждый месяц этого числа ("0" - месяц). Если вместо дня идет следующее
  сочетание:  "Ewd", где "E" - служебный символ ("E"!), "w" - номер недели
  месяца, "d" - номер дня недели, то это событие будет выводиться каждый
  "d"-ый день "w"-ой недели месяца. Если же "w" - это символ "L", то
  "w" равно номеру последней недели. (Написано очень непонятно, но после
  примера все встанет на свои места...). Например:
    (E24, 7)"второй четверг июля"
    выведется ко второму четвергу июля, а
    (el3, 7)"последняя среда июля"
    - к последней среде июля...
  День и месяц могут разделяться
  пробелом или запятой. Если после даты в скобках стоит число, то оно
  считается переменной @daysfrw@, а следующая - @daysback@. Так, событие
    (5 7, 4 2) "Иван Иваныча"
  в блоке из предыдущего примера будет выводиться за четыре дня до 5 июля и
  два дня после него.
    Здесь сразу нужно пояснить, для чего выводятся даты уже прошедших
  праздников. Допустим, Вы используете компьютер не каждый день, и запустив,
  например, его через три дня, Вы обнаруживаете, что:
    5 ИЮЛЯ, ВЧЕРА, День рождения Иван Иваныча - поздравить!
  А сегодня-то уже 6 июля! Но можно еще успеть поздравить. Лучше поздно,
  чем никогда! Впрочем, это легко отключается...
--
    В этой версии программы появилась возможность включать дополнительные
  файлы внутрь друг друга. То есть, если в программе есть строка:
     #include "file1.txd"
  текст файла file1.txd будет вставлен при чтении так, если бы его содер-
  жимое находилось в первичном файле. В свою очередь сам включенный файл может
  включать любое количество других файлов (но если файлы включают друг друга
  взаимно, программа "зациклится" - это остается на совести пользователя!).
    [В данной программе использован улучшенный алгоритм включения файлов, так,
  что "проблема открытых файлов", знакомая любому программисту под DOS (когда
  нельзя использовать больше определенного числа открытых файлов) отсутствует.
  Это достигается тем, что файл закрывается перед чтением очередного файла и
  опять открывается после, что позволяет использовать большее их число
  (однако, процедура их чтения - рекурсивна и при большом количестве файлов
  может произойти переполнение стека).]
    Каждый #include - файл должен иметь свой главный блок, как и первичный
  файл, то есть, весь текст до главного блока файла - является комментарием.

----------------------------------------------

    Программа имеет несколько управляющих параметров, которые можно
  передавать при запуске в командной строке:
    /?       -  Вывод справки о параметрах.
    /F<n>    -  За сколько дней вперед предупреждать о событиях
    /B<n>    -  Сколько дней выводить прошедшие праздники
    /P<n>    -  Длительность паузы (усл. величин - зависит от числа событий)
    \<Path>  -  Путь к файлу с датами (если нет имени файла, то days.txd)
    /1       -  Запускать Программу не более 1 раза в сутки
    /SORT    -  Сортировать выводимые события по дате.
    /REG     -  Сообщение регистрационного номера для Вашего компьютера.

       Командную строку по умолчанию можно вставить в файл с датами
    следующим образом:
      #paramstr=<командная строка>
   здесь можно использовать все те ключи, что и в обычной командной строке,
 кроме ключа "\".

----------------------------------------------

   К сожалению, не удалось успеть воплотить в программе все идеи, которые
  я намеревался использовать. Но в ближайших версиях программы ожидайте:
    -  Расширенная конкатенация строк.
    -  Условия на локальные переменные (и в том числе - для каждого события)
    -  Организация массивов.
    -  а также все Ваши пожелания, которые Вы можете мне передать.

----------------------------------------------

    Начиная с версии 5.22 Программа требует регистрации. Требует она ее
  ненавязчиво - при каждом запуске появляется напоминание с паузой.
   Регистрация абсолютно бесплатная, от Вас только требуется:
     -  Запустить Программу с ключом /REG
     -  Заполнить регистрационную форму days.frm  (не забудьте рег. номер!!).
     -  Отослать ее мне по e-mail (адрес см. ниже) или лично.
  И все! В самое ближайшее время Вы получите по e-mail свой личный ID-номер
  (для конкретного компьютера) и, если повезет, более новую версию Программы.
    ID-номер следует вставить в ваш файл с датами следующим образом: если,
  например, Ваш ID-номер: DDABDEA, то вставьте строку:
    #ID=DDABDEA
  ...и надоедливая строка с напоминанием исчезнет.
    Если Вы сменили компьютер (мат. плату), то необходимо заново произвести
  регистрацию.
    Вообще, эта регистрация необходима больше для своевременного обновления
  существующих версий программы и для того, чтобы Я мог связаться со своими
  пользователями в случае каких-либо оргвопросов. Зарегистрированный
  пользователь имеет право на всевозможную помощь автора данной программы.
    Если Вам не нравится перспектива включения лишней строки в файл с
  событиями или по какой другой причине, Вы можете выслать мне регистрацион-
  ную форму и сообщить об этом своем нежелании. Тогда лично для Вас будет
  создана версия Программы, которая будет запускаться только(!) на Вашем
  компьютере.

----------------------------------------------

    Программа написана на языке программирования Borland C++ v3.1 и запре-
  щается изменять или дизассемблировать ее.

    Эта серия программ от "Company 'Do'" предназначена исключительно для
  ОС (операционной системы) DOS. Данное предпочтение автора принципиально
  и недовольным просьба не обращаться.

    Программа распространяется бесплатно, не возбраняется переписывать ее
  другим пользователям независимо от их желания.


                                                    Колянов Алексей
                                                     Company "Do"
                                                      14.11.2001

                                    e-mail:baldr@pisem.net
                                  homepage:http://www.dospage.far.ru

   P.S. Пишите, пожалуйста, о всех найденных ошибках и просто пожеланиях.




